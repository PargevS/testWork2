{"version":3,"sources":["helpers/getMeanAndStdDeviation.js","helpers/getMedian.js","helpers/findMode.js","hooks/useWebWorker.js","components/TD/TD.js","components/TD/index.js","App.js","index.js"],"names":["getMeanAndStdDeviation","array","length","mean","reduce","prev","item","idx","value","stdDeviation","Math","sqrt","map","x","pow","a","b","getMedian","half","floor","sort","findMode","mapping","mode","i","prop","parseInt","workerHandler","fn","onmessage","e","postMessage","data","useWebWorker","useState","result","setResult","run","worker","Worker","URL","createObjectURL","Blob","terminate","TD","children","elClassName","attrs","classes","classNames","console","log","className","defaultProps","React","memo","App","serverData","setServerData","connectionError","setConnectionError","connected","setConnected","isStatistic","setIsStatistic","socket","useRef","medianWorker","modeWorker","meanAndStdDeviationWorker","onClick","current","WebSocket","onopen","mess","JSON","parse","pr","onclose","onerror","err","message","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7d33d4a.chunk.js","sourcesContent":["// const getMean = (array) => {\r\n//     if (array.length) {\r\n//         let result = array.reduce((prev, item, idx) => prev + item.value, 0);\r\n//         return result / array.length;\r\n//     } else return null;\r\n// }\r\n//\r\n// const getStandardDeviation = (array, arrayMean) => {\r\n//\r\n//     if (array.length) {\r\n//         let mean = array.reduce((prev, item, idx) => prev + item.value, 0);\r\n//         mean = mean / array.length;\r\n//\r\n//         if (mean) {\r\n//             const stdDeviation = Math.sqrt(array.map(x => Math.pow(x.value - arrayMean, 2)).reduce((a, b) => a + b) / array.length);\r\n//             return {mean, stdDeviation};\r\n//         }\r\n//\r\n//         return {mean: null, stdDeviation: null}\r\n//     }\r\n//\r\n//     return {mean: null, stdDeviation: null}\r\n// }\r\n\r\n\r\nexport const getMeanAndStdDeviation = (array) => {\r\n    if (array.length) {\r\n        let mean = array.reduce((prev, item, idx) => prev + item.value, 0);\r\n        mean = mean / array.length;\r\n\r\n        if (mean) {\r\n            const stdDeviation = Math.sqrt(array.map(x => Math.pow(x.value - mean, 2)).reduce((a, b) => a + b) / array.length);\r\n            return {mean, stdDeviation};\r\n        }\r\n\r\n        return {mean: null, stdDeviation: null}\r\n    }\r\n\r\n    return {mean: null, stdDeviation: null}\r\n}","export const getMedian = (array) => {\r\n    if (array.length) {\r\n        let half = Math.floor(array.length / 2);\r\n        array.sort(function(a, b) { return a.value - b.value;});\r\n\r\n        if (array.length % 2) {\r\n            return array[half].value;\r\n        } else {\r\n            return (array[half].value + array[half].value + 1) / 2.0;\r\n        }\r\n    }\r\n    return null;\r\n}","export function findMode(array) {\r\n    const mapping = {};\r\n    let mode = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (!mapping[array[i].value]) {\r\n            mapping[array[i].value] = 0;\r\n        }\r\n        mapping[array[i].value] += 1;\r\n    }\r\n    for (let prop in mapping) {\r\n        if (mapping[prop] > mode) {\r\n            mode = parseInt(prop);\r\n        }\r\n    }\r\n    return mode;\r\n}","import {useState} from 'react';\r\n\r\n\r\nconst workerHandler = (fn) => {\r\n    onmessage = (e) => postMessage(fn(e.data));\r\n}\r\n\r\n\r\nexport const useWebWorker = (fn) => {\r\n    const [result, setResult] = useState(null);\r\n\r\n    const run = (value) => {\r\n        const worker = new Worker(\r\n            URL.createObjectURL(new Blob([`(${workerHandler})(${fn})`]))\r\n        );\r\n        worker.onmessage = (e) => {\r\n            setResult(e.data);\r\n            worker.terminate();\r\n        }\r\n        worker.postMessage(value);\r\n    }\r\n\r\n\r\n    return {result, run};\r\n\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n//* import of components and developer packages\r\nimport './TD.scss';\r\n\r\nconst TD = ({children, elClassName, ...attrs}) => {\r\n    const classes = classNames(elClassName);\r\n\r\n    console.log('tddddddddd')\r\n\r\n    return (\r\n        <td className={classes} {...attrs}>\r\n            {children}\r\n        </td>\r\n    );\r\n};\r\n\r\nTD.propTypes = {\r\n    children: PropTypes.node,\r\n    elClassName: PropTypes.string\r\n};\r\n\r\nTD.defaultProps = {\r\n    children: <></>,\r\n    elClassName: ''\r\n};\r\n\r\nexport default React.memo(TD);","import TD from \"./TD\";\r\n\r\n\r\nexport default TD;","import React, {useState, useRef, Fragment} from 'react';\n\nimport './App.scss';\nimport {getMeanAndStdDeviation, getMedian, findMode} from \"./helpers\";\nimport {useWebWorker} from \"./hooks/useWebWorker\";\nimport TD from \"./components/TD\";\n\nfunction App() {\n    const [serverData, setServerData] = useState([]);\n    const [connectionError, setConnectionError] = useState(false);\n    const [connected, setConnected] = useState(false);\n    const [isStatistic, setIsStatistic] = useState(false);\n    const socket = useRef();\n\n\n    const medianWorker = useWebWorker(getMedian);\n    const modeWorker = useWebWorker(findMode);\n    const meanAndStdDeviationWorker = useWebWorker(getMeanAndStdDeviation);\n\n\n    const connectWS = () => {\n        socket.current = new WebSocket('wss://trade.trademux.net:8800/?password=1234');\n\n        socket.current.onopen = () => {\n            setConnected(true);\n            console.log('success connection');\n        }\n\n        socket.current.onmessage = (e) => {\n            const mess = JSON.parse(e.data);\n            setServerData(pr => [...pr, mess]);\n        }\n\n        socket.current.onclose = () => {\n\n        }\n\n        socket.current.onerror = (err) => {\n            console.log(err.message)\n            setConnectionError(true);\n            console.log('An error has occurred');\n        }\n    }\n\n\n    const statisticsHandler = () => {\n        medianWorker.run(serverData);\n        modeWorker.run(serverData);\n        meanAndStdDeviationWorker.run(serverData);\n        setIsStatistic(true);\n    }\n\n\n    return (\n        <div className=\"app\">\n            {connectionError ? ('Connection Error') : (\n                <Fragment>\n                    {!connected && (<p>Для запуска приложения нажмите пожалуйста на кнопку старт</p>)}\n                    <div className=\"control\">\n                        {!connected && (<button onClick={connectWS} disabled={connected}>Старт</button>)}\n                        {connected && (\n                            <button onClick={statisticsHandler} disabled={!serverData.length}>\n                                {serverData.length ? 'Получить статистику' : 'Подготовка данных...'}\n\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"statistics\">\n                        {serverData.length && isStatistic ? (\n                            <table>\n                                <thead>\n                                <tr>\n                                    <th>среднее</th>\n                                    <th>стандартное отклонение</th>\n                                    <th>моду</th>\n                                    <th>медиану</th>\n                                    <th>потерянные котировки</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <tr>\n                                    <TD>{(meanAndStdDeviationWorker.result && meanAndStdDeviationWorker.result.mean) || 'Loading...'}</TD>\n                                    <TD>{(meanAndStdDeviationWorker.result && meanAndStdDeviationWorker.result.stdDeviation) || 'Loading...'}</TD>\n                                    <TD>{modeWorker.result || 'Loading...'}</TD>\n                                    <TD>{medianWorker.result || 'Loading...'}</TD>\n                                    <TD>потерянные котировки</TD>\n                                </tr>\n                                </tbody>\n                            </table>\n                        ) : null}\n                    </div>\n                </Fragment>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}